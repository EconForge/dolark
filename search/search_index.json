{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DolARK Introduction DolARK is an experimental project to solve heterogenous agents models with infinitely lived agents. It relies on Dolo to model individual agents behavious and extends its modeling language to describe distributions of agents and aggregate dynamics. We aim to support the following basic cases: heterogenous preferences, i.i.d. idiosyncratic shocks no aggregate risk homogenous preferences, perturbation w.r.t. aggregate risk homogenous preferences, dimension reduction of the state-space a la Krussell-Smith Frequently Asked Questions No question was ever asked. Certainly because it's all very clear. Developper Corner Contribute to the documentation Documentation is contained in the docs subdirectory. In order to develop it locally: pip install mkdocs pip install pymdown-extensions Then mkdocs serve from within DolARK repository. On a regular basis, latest version is deployed to github pages pages (for now) using mkdocs gh-deploy . Notebooks are written as Python files and can be opened with Jupyter using the jupytext extension.","title":"Home"},{"location":"#dolark","text":"","title":"DolARK"},{"location":"#introduction","text":"DolARK is an experimental project to solve heterogenous agents models with infinitely lived agents. It relies on Dolo to model individual agents behavious and extends its modeling language to describe distributions of agents and aggregate dynamics. We aim to support the following basic cases: heterogenous preferences, i.i.d. idiosyncratic shocks no aggregate risk homogenous preferences, perturbation w.r.t. aggregate risk homogenous preferences, dimension reduction of the state-space a la Krussell-Smith","title":"Introduction"},{"location":"#frequently-asked-questions","text":"No question was ever asked. Certainly because it's all very clear.","title":"Frequently Asked Questions"},{"location":"#developper-corner","text":"","title":"Developper Corner"},{"location":"#contribute-to-the-documentation","text":"Documentation is contained in the docs subdirectory. In order to develop it locally: pip install mkdocs pip install pymdown-extensions Then mkdocs serve from within DolARK repository. On a regular basis, latest version is deployed to github pages pages (for now) using mkdocs gh-deploy . Notebooks are written as Python files and can be opened with Jupyter using the jupytext extension.","title":"Contribute to the documentation"},{"location":"equilibrium/","text":"Time-invariant equilibrium Recall the model written in section X. The agents decision depends on the values processes, which are pinned down by aggregate conditions. These conditions are fixed in an additional equilibrium section. Let us start from an example: symbols : exogenous : [ z ] aggregate : [ K ] parameters : [ A , alpha , delta , \u03c1 ] calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 equilibrium : K = k Graphical represenation vegaEmbed('#view','../graphs/distrib.json'); heterogeneity Now, a model with idiosyncratic heterogeneity: symbols : exogenous : [ z ] aggregate : [ K ] parameters = [A, alpha, delta, \u03c1] ) calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 equilibrium : K = k heterogeneity : \u03b2 : !Uniform a : 0.95 b : 0.96","title":"Equilibrium"},{"location":"equilibrium/#time-invariant-equilibrium","text":"Recall the model written in section X. The agents decision depends on the values processes, which are pinned down by aggregate conditions. These conditions are fixed in an additional equilibrium section. Let us start from an example: symbols : exogenous : [ z ] aggregate : [ K ] parameters : [ A , alpha , delta , \u03c1 ] calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 equilibrium : K = k Graphical represenation vegaEmbed('#view','../graphs/distrib.json');","title":"Time-invariant equilibrium"},{"location":"equilibrium/#heterogeneity","text":"Now, a model with idiosyncratic heterogeneity: symbols : exogenous : [ z ] aggregate : [ K ] parameters = [A, alpha, delta, \u03c1] ) calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 equilibrium : K = k heterogeneity : \u03b2 : !Uniform a : 0.95 b : 0.96","title":"heterogeneity"},{"location":"krussell_smith/","text":"Krussell & Smith algorithm","title":"Krussell-Smith"},{"location":"krussell_smith/#krussell-smith-algorithm","text":"","title":"Krussell &amp; Smith algorithm"},{"location":"model_def/","text":"Model Definition The definition of the model involves two YAML files: the first one concerns the individual agents while the second one includes information about the equilibrium to close the model. Single-agent problem Recall the setup of a single-agent problem, as solved by dolo : an agent attempts to control a stochastic process, driven by exogenous process e_t^i e_t^i , by choosing decisions x_t x_t so that the evolution of the endogenous state is: s_t = g(e_{t-1}^i, s_{t-1}, x_{t-1}, e_t^i) s_t = g(e_{t-1}^i, s_{t-1}, x_{t-1}, e_t^i) where g g is a known function. Since e_t^i e_t^i follows a markov chain, e_{t+1}^i e_{t+1}^i is known using e_t^i e_t^i and the arbitrage equation is written: E_{e_{t+1}^i|e_t^i} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] E_{e_{t+1}^i|e_t^i} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] for some known function f f , called arbitrage function. Optimal choice is function \\varphi() \\varphi() , such that x_t=\\varphi(e_t^i, s_t) x_t=\\varphi(e_t^i, s_t) . The exogenous process e_t^i e_t^i contains all the necessary information for the agent to optimize its decisions, namely - idiosyncratic shocks denoted \\epsilon_t^i \\epsilon_t^i - aggregate prices y_t y_t . Note For a basic consumption savings problem, the endogenous state s_t s_t is the level of assets a_t a_t , while the control x_t x_t is the re-invested amount i_t i_t so that that the law of motion of asset holdings is: a_t = (i_{t-1})(1+r_t) + exp(\\epsilon_t)w_t a_t = (i_{t-1})(1+r_t) + exp(\\epsilon_t)w_t where \\epsilon_t^i \\epsilon_t^i is an idiosyncratic process for efficiency and r_t r_t (resp. w_t w_t ) a process for interest rate (resp. wage.). Fitting the notations above, y_t = \\left(r_t, w_t \\right) y_t = \\left(r_t, w_t \\right) and e_t^i = \\left( \\epsilon_t^i, y_t \\right) e_t^i = \\left( \\epsilon_t^i, y_t \\right) The optimality condition is: \u03b2 E_t \\left[ \\frac{U^{\\prime}(\\overbrace{a_{t+1}-i_{t+1}}^{c_{t+1}})}{U^{\\prime}(\\underbrace{a_{t}-i_{t}}_{c_t})}r_{t+1}\\right]=1 \u03b2 E_t \\left[ \\frac{U^{\\prime}(\\overbrace{a_{t+1}-i_{t+1}}^{c_{t+1}})}{U^{\\prime}(\\underbrace{a_{t}-i_{t}}_{c_t})}r_{t+1}\\right]=1 For a traditional one agent problem without aggregate shocks, r_t r_t and w_t w_t are typically constant and equal \\overline{r} \\overline{r} and \\overline{w} \\overline{w} while \\epsilon_t^i \\epsilon_t^i follows an AR(1). Since \\overline{w} \\overline{w} and \\overline{r} \\overline{r} are constant, they can be declared as parameters in the symbols section of the model: symbols: states: [a] exogenous: [e] parameters: [\u03b2, \u03b3, \u03c1, \u03c3, w, r] In the exogenous section exogenous: e: !AR1 \u03c1: 0.9 \u03c3: 0.01 In DolARK, the behavior of each agent is defined by the exact same functions f f and g g as in dolo, with a small modification to the way the exogenous process is modeled. We assume there is a state of the world \u03c9_t^i \u03c9_t^i , whose stochastic process is known to the agent, and a projection function p() p() which defines relevant exogenous states of the agent: e_t^i=p(\u03c9_t^i) e_t^i=p(\u03c9_t^i) . Since \u03c9_t^i \u03c9_t^i is required to predict \\omega_{t+1}^i \\omega_{t+1}^i , the optimality condition becomes: E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] or E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(p(\\color{\\red}{\u03c9_t^i}), s_t, x_t, p(\\color{\\red}{\u03c9_{t+1}^i}), s_{t+1}, x_{t+1})\\right] E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(p(\\color{\\red}{\u03c9_t^i}), s_t, x_t, p(\\color{\\red}{\u03c9_{t+1}^i}), s_{t+1}, x_{t+1})\\right] Optimal choice is now a function \\varphi() \\varphi() , such that x_t=\\varphi(\\color{\\red}{\u03c9_t^i}, s_t) x_t=\\varphi(\\color{\\red}{\u03c9_t^i}, s_t) . The construction of \\omega_t^i \\omega_t^i and the exact specification of p() p() is a result from the market equilibrium solution procedure and is typically never constructed explicitly. The bottom line is that the agent's problem, and how to solve it, is essentially unchanged, save for the nature of the exogenous process. As a result, the one agent problem can be written using the dolo conventions, and the original routines are run unmodified. Variables appearing in the agent's program, which are determined by market interaction, must be defined as exogenous shocks. By convention these aggregate variables, must come before idiosyncratic shocks. Note In this example, the aggregate endogenous variables are the interest rate r r and the wage w w . The two modifications stated in the previous paragraph appear below in the exogenous subsection of the symbols section r and w are declared as exogenous, and declared before the idiosyncratic shocks e . symbols: ... exogenous: [r,w,e] ... in the exogenous section exogenous: r,w: !ConstantProcess \u03bc: [r, w] e: !AR1 \u03c1: 0.9 \u03c3: 0.01 Warning Note that it is not mandatory to use a !ConstantProcess for shocks determined at the aggegate level. Any type of process could be used here. It is merely a place holder and the aggregate solution procedure, will seek to replace it by a suitable process, for instance a Markov Chain or a perturbed process. The rest of the YAML file writes following the documentation of dolo . See the full source below. Aiyagari (1994): consumption savings model symbols: states: [a] exogenous: [r, w, e] parameters: [alpha, L, delta, beta, a_min, a_max] controls: [i] definitions: c: (1+r)*a+w*exp(e) - i equations: arbitrage: - 1-beta*(1+r(+1))*c/c(+1) | -B <= i <= (1+r)*a+w*exp(e) transition: - a = i(-1) calibration: ... r: alpha*(L/K)**(1-alpha) - delta w: (1-alpha)*(K/L)**(alpha) ... domain: a: [a_min, a_max] exogenous: r,w: !ConstantProcess \u03bc: [r, w] e: !VAR1 \u03c1: 0.95 \u03a3: [[0.06**2]] options: grid: !Cartesian orders: [30] Equilibrium conditions The second YAML file states the equilibrium conditions. Ex ante identical agents Consider now a continuum of mass 1, made of agents that are all identical ex-ante. Consider an aggregate process m_t m_t and some aggregate equilibrium variables y_t y_t (also called abusively \"prices\"). Given m_t m_t , denote by (\\epsilon^i,s)\\rightarrow\\mu_t(\\epsilon^i,s) (\\epsilon^i,s)\\rightarrow\\mu_t(\\epsilon^i,s) the joint distribution of the endogenous states and idiosyncratic exogenous states across all agents and by x_t x_t the choices agents make (the mathematical nature of these objects is left a bit fuzzy for now). The whole economy is specified by: A law of motion for process m_t m_t A projection function p(.) whose output at least includes the aggregate exogenous process y_t y_t Equilibrium conditions defined by a function \\mathcal{E} \\mathcal{E} such that \\int \\mathcal{E}\\left(e_t, s_t, x(e_t,s_t), y_t\\right) d \\mu_t (e,s)= 0 \\int \\mathcal{E}\\left(e_t, s_t, x(e_t,s_t), y_t\\right) d \\mu_t (e,s)= 0 where integral is taken over the distribution of agents over all their endogenous and idiosyncratic exogenous states. Note To link the current notations to the paragraph above, \\omega_t^i \\omega_t^i consists in the vector \\left(\\epsilon_t^i, m_t, \\mu_t \\right) \\left(\\epsilon_t^i, m_t, \\mu_t \\right) . Generally, if idiosyncratic shocks \\epsilon_t^i \\epsilon_t^i are independent of the aggregate exogenous process m_t m_t , the output of function p p needs not to include \\epsilon_t^i \\epsilon_t^i and the corresponding exogenous process is directly defined in the single-agent YAML file. It may be different if the process of \\epsilon_t^i \\epsilon_t^i depends on m_t m_t , as is the case in Krusell and Smith (1998)'s specification. Warning In this formulation, m_t m_t and d \\mu_t d \\mu_t are aggregate \"states\", that is they are predetermined and x_t,y_t x_t,y_t are aggregate \"controls\", meaning there is a function \\Phi() \\Phi() such that (x_t,y_t)=\\Phi(m_t,\\mu_t) (x_t,y_t)=\\Phi(m_t,\\mu_t) . the formulation above implies some restrictions that might be lifted in the future: there is no persistent aggregate endogenous state variable equations pinning down the aggregate equilibrium are static. They cannot define forward looking prices. An Example: Aiyagari (1994) with aggregate productivity shocks Here is how wage and interest rate is determined for all agents. Firms in perfect competition produce the homogeneous good with a Cobb-Douglas technology and choose inputs to maximize profits. Thus, the representative firm's program is \\max_{K_t,L} z_t A K_t^\\alpha L^{1-\\alpha} - (r_t+\\delta) K_t - w_t L \\max_{K_t,L} z_t A K_t^\\alpha L^{1-\\alpha} - (r_t+\\delta) K_t - w_t L where z_t z_t is the aggregate productivity shock K_t K_t is aggregate capital L L is aggregate labor supply \\delta \\delta is the depreciation rate of capital A A is the scale factor of production \\alpha \\alpha is the output elasticity w.r.t capital The first-order conditions of the firm's program deliver expressions for r_t r_t and w_t w_t . r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha} r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha} While the YAML file for the single-agent is built as described above, the YAML file for the aggregate part writes as follows if z_t z_t follows a logged AR(1). symbols : exogenous : [ z ] aggregate : [ K ] parameters : [ A , alpha , delta , \u03c1 ] calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 \u03c3 : 0.025 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 projection : r : alpha*exp(z)*(N/K)**(1-alpha) - delta w : (1-alpha)*exp(z)*(K/N)**(alpha) equilibrium : K = a Note the familiarity with the one-agent problem: symbols, calibration of parameters, and definition of exogenous shocks, are defined in exactly the same way. It is not necessary to redefine variables that were defined in the agent's program. All these variables are recognized and implicitly indexed. For instance a , which was defined in the preceding section and is implicitly with the agents distribution. Also, the equilibrium condition implicitly features an integration over all agents, so that K=a is intepreted as: K_t = \\int_{e,s} a(e,s) d\u03bc_t(e,s) K_t = \\int_{e,s} a(e,s) d\u03bc_t(e,s) Ex ante heterogeneous agents DolARK allows to define models where one or many parameters of one agent's program is heterogenous, and distributed after some distribution. This is done by adding a special distribution section. Note To model heterogeneity in the discount factor, add a distribution section: distribution: \u03b2: !Uniform a: 0.95 b: 0.96 The effect of this section will be to instruct dolark to solve for several agents problem for different values \\beta^i \\beta^i associate with probabilities \\pi^i \\pi^i that approximate distribution \\beta \\beta . Denote by a^{i_\\beta} a^{i_\\beta} and d\\mu^{i_{\\beta}} d\\mu^{i_{\\beta}} the corresponding decision rules and ergodic distributions. The market clearing condition becomes: K_t = \\int_{\u03b2} d\u03c0(\u03b2) \\int_{e,s} a^{\u03b2}(e,s) d\u03bc^{\u03b2}_t(e,s) K_t = \\int_{\u03b2} d\u03c0(\u03b2) \\int_{e,s} a^{\u03b2}(e,s) d\u03bc^{\u03b2}_t(e,s) Attention There is a second experimental way to model heterogeneity: to treat the heterogenous parameter as a persistent shock. To implement it, the agent's problem needs to feature this shock as the first exogenous shock. Note that it can create subtle timing inconsistencies in the model. For instance symbol \\beta would be taken as representing \u03b2_t which might not be allowed for certain equations specifications. (transitions and arbitrage equations should be fine)","title":"Model Definition"},{"location":"model_def/#model-definition","text":"The definition of the model involves two YAML files: the first one concerns the individual agents while the second one includes information about the equilibrium to close the model.","title":"Model Definition"},{"location":"model_def/#single-agent-problem","text":"Recall the setup of a single-agent problem, as solved by dolo : an agent attempts to control a stochastic process, driven by exogenous process e_t^i e_t^i , by choosing decisions x_t x_t so that the evolution of the endogenous state is: s_t = g(e_{t-1}^i, s_{t-1}, x_{t-1}, e_t^i) s_t = g(e_{t-1}^i, s_{t-1}, x_{t-1}, e_t^i) where g g is a known function. Since e_t^i e_t^i follows a markov chain, e_{t+1}^i e_{t+1}^i is known using e_t^i e_t^i and the arbitrage equation is written: E_{e_{t+1}^i|e_t^i} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] E_{e_{t+1}^i|e_t^i} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] for some known function f f , called arbitrage function. Optimal choice is function \\varphi() \\varphi() , such that x_t=\\varphi(e_t^i, s_t) x_t=\\varphi(e_t^i, s_t) . The exogenous process e_t^i e_t^i contains all the necessary information for the agent to optimize its decisions, namely - idiosyncratic shocks denoted \\epsilon_t^i \\epsilon_t^i - aggregate prices y_t y_t . Note For a basic consumption savings problem, the endogenous state s_t s_t is the level of assets a_t a_t , while the control x_t x_t is the re-invested amount i_t i_t so that that the law of motion of asset holdings is: a_t = (i_{t-1})(1+r_t) + exp(\\epsilon_t)w_t a_t = (i_{t-1})(1+r_t) + exp(\\epsilon_t)w_t where \\epsilon_t^i \\epsilon_t^i is an idiosyncratic process for efficiency and r_t r_t (resp. w_t w_t ) a process for interest rate (resp. wage.). Fitting the notations above, y_t = \\left(r_t, w_t \\right) y_t = \\left(r_t, w_t \\right) and e_t^i = \\left( \\epsilon_t^i, y_t \\right) e_t^i = \\left( \\epsilon_t^i, y_t \\right) The optimality condition is: \u03b2 E_t \\left[ \\frac{U^{\\prime}(\\overbrace{a_{t+1}-i_{t+1}}^{c_{t+1}})}{U^{\\prime}(\\underbrace{a_{t}-i_{t}}_{c_t})}r_{t+1}\\right]=1 \u03b2 E_t \\left[ \\frac{U^{\\prime}(\\overbrace{a_{t+1}-i_{t+1}}^{c_{t+1}})}{U^{\\prime}(\\underbrace{a_{t}-i_{t}}_{c_t})}r_{t+1}\\right]=1 For a traditional one agent problem without aggregate shocks, r_t r_t and w_t w_t are typically constant and equal \\overline{r} \\overline{r} and \\overline{w} \\overline{w} while \\epsilon_t^i \\epsilon_t^i follows an AR(1). Since \\overline{w} \\overline{w} and \\overline{r} \\overline{r} are constant, they can be declared as parameters in the symbols section of the model: symbols: states: [a] exogenous: [e] parameters: [\u03b2, \u03b3, \u03c1, \u03c3, w, r] In the exogenous section exogenous: e: !AR1 \u03c1: 0.9 \u03c3: 0.01 In DolARK, the behavior of each agent is defined by the exact same functions f f and g g as in dolo, with a small modification to the way the exogenous process is modeled. We assume there is a state of the world \u03c9_t^i \u03c9_t^i , whose stochastic process is known to the agent, and a projection function p() p() which defines relevant exogenous states of the agent: e_t^i=p(\u03c9_t^i) e_t^i=p(\u03c9_t^i) . Since \u03c9_t^i \u03c9_t^i is required to predict \\omega_{t+1}^i \\omega_{t+1}^i , the optimality condition becomes: E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(e_t^i, s_t, x_t, e_{t+1}^i, s_{t+1}, x_{t+1})\\right] or E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(p(\\color{\\red}{\u03c9_t^i}), s_t, x_t, p(\\color{\\red}{\u03c9_{t+1}^i}), s_{t+1}, x_{t+1})\\right] E_{\\color{\\red}{\u03c9_{t+1}^i}|\\color{\\red}{\u03c9_t^i}} = \\left[ f(p(\\color{\\red}{\u03c9_t^i}), s_t, x_t, p(\\color{\\red}{\u03c9_{t+1}^i}), s_{t+1}, x_{t+1})\\right] Optimal choice is now a function \\varphi() \\varphi() , such that x_t=\\varphi(\\color{\\red}{\u03c9_t^i}, s_t) x_t=\\varphi(\\color{\\red}{\u03c9_t^i}, s_t) . The construction of \\omega_t^i \\omega_t^i and the exact specification of p() p() is a result from the market equilibrium solution procedure and is typically never constructed explicitly. The bottom line is that the agent's problem, and how to solve it, is essentially unchanged, save for the nature of the exogenous process. As a result, the one agent problem can be written using the dolo conventions, and the original routines are run unmodified. Variables appearing in the agent's program, which are determined by market interaction, must be defined as exogenous shocks. By convention these aggregate variables, must come before idiosyncratic shocks. Note In this example, the aggregate endogenous variables are the interest rate r r and the wage w w . The two modifications stated in the previous paragraph appear below in the exogenous subsection of the symbols section r and w are declared as exogenous, and declared before the idiosyncratic shocks e . symbols: ... exogenous: [r,w,e] ... in the exogenous section exogenous: r,w: !ConstantProcess \u03bc: [r, w] e: !AR1 \u03c1: 0.9 \u03c3: 0.01 Warning Note that it is not mandatory to use a !ConstantProcess for shocks determined at the aggegate level. Any type of process could be used here. It is merely a place holder and the aggregate solution procedure, will seek to replace it by a suitable process, for instance a Markov Chain or a perturbed process. The rest of the YAML file writes following the documentation of dolo . See the full source below. Aiyagari (1994): consumption savings model symbols: states: [a] exogenous: [r, w, e] parameters: [alpha, L, delta, beta, a_min, a_max] controls: [i] definitions: c: (1+r)*a+w*exp(e) - i equations: arbitrage: - 1-beta*(1+r(+1))*c/c(+1) | -B <= i <= (1+r)*a+w*exp(e) transition: - a = i(-1) calibration: ... r: alpha*(L/K)**(1-alpha) - delta w: (1-alpha)*(K/L)**(alpha) ... domain: a: [a_min, a_max] exogenous: r,w: !ConstantProcess \u03bc: [r, w] e: !VAR1 \u03c1: 0.95 \u03a3: [[0.06**2]] options: grid: !Cartesian orders: [30]","title":"Single-agent problem"},{"location":"model_def/#equilibrium-conditions","text":"The second YAML file states the equilibrium conditions.","title":"Equilibrium conditions"},{"location":"model_def/#ex-ante-identical-agents","text":"Consider now a continuum of mass 1, made of agents that are all identical ex-ante. Consider an aggregate process m_t m_t and some aggregate equilibrium variables y_t y_t (also called abusively \"prices\"). Given m_t m_t , denote by (\\epsilon^i,s)\\rightarrow\\mu_t(\\epsilon^i,s) (\\epsilon^i,s)\\rightarrow\\mu_t(\\epsilon^i,s) the joint distribution of the endogenous states and idiosyncratic exogenous states across all agents and by x_t x_t the choices agents make (the mathematical nature of these objects is left a bit fuzzy for now). The whole economy is specified by: A law of motion for process m_t m_t A projection function p(.) whose output at least includes the aggregate exogenous process y_t y_t Equilibrium conditions defined by a function \\mathcal{E} \\mathcal{E} such that \\int \\mathcal{E}\\left(e_t, s_t, x(e_t,s_t), y_t\\right) d \\mu_t (e,s)= 0 \\int \\mathcal{E}\\left(e_t, s_t, x(e_t,s_t), y_t\\right) d \\mu_t (e,s)= 0 where integral is taken over the distribution of agents over all their endogenous and idiosyncratic exogenous states. Note To link the current notations to the paragraph above, \\omega_t^i \\omega_t^i consists in the vector \\left(\\epsilon_t^i, m_t, \\mu_t \\right) \\left(\\epsilon_t^i, m_t, \\mu_t \\right) . Generally, if idiosyncratic shocks \\epsilon_t^i \\epsilon_t^i are independent of the aggregate exogenous process m_t m_t , the output of function p p needs not to include \\epsilon_t^i \\epsilon_t^i and the corresponding exogenous process is directly defined in the single-agent YAML file. It may be different if the process of \\epsilon_t^i \\epsilon_t^i depends on m_t m_t , as is the case in Krusell and Smith (1998)'s specification. Warning In this formulation, m_t m_t and d \\mu_t d \\mu_t are aggregate \"states\", that is they are predetermined and x_t,y_t x_t,y_t are aggregate \"controls\", meaning there is a function \\Phi() \\Phi() such that (x_t,y_t)=\\Phi(m_t,\\mu_t) (x_t,y_t)=\\Phi(m_t,\\mu_t) . the formulation above implies some restrictions that might be lifted in the future: there is no persistent aggregate endogenous state variable equations pinning down the aggregate equilibrium are static. They cannot define forward looking prices. An Example: Aiyagari (1994) with aggregate productivity shocks Here is how wage and interest rate is determined for all agents. Firms in perfect competition produce the homogeneous good with a Cobb-Douglas technology and choose inputs to maximize profits. Thus, the representative firm's program is \\max_{K_t,L} z_t A K_t^\\alpha L^{1-\\alpha} - (r_t+\\delta) K_t - w_t L \\max_{K_t,L} z_t A K_t^\\alpha L^{1-\\alpha} - (r_t+\\delta) K_t - w_t L where z_t z_t is the aggregate productivity shock K_t K_t is aggregate capital L L is aggregate labor supply \\delta \\delta is the depreciation rate of capital A A is the scale factor of production \\alpha \\alpha is the output elasticity w.r.t capital The first-order conditions of the firm's program deliver expressions for r_t r_t and w_t w_t . r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha} r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha} While the YAML file for the single-agent is built as described above, the YAML file for the aggregate part writes as follows if z_t z_t follows a logged AR(1). symbols : exogenous : [ z ] aggregate : [ K ] parameters : [ A , alpha , delta , \u03c1 ] calibration : A : 1 alpha : 0.36 delta : 0.025 K : 40 z : 0 \u03c1 : 0.95 \u03c3 : 0.025 exogenous : !AR1 \u03c1 : \u03c1 \u03c3 : \u03c3 projection : r : alpha*exp(z)*(N/K)**(1-alpha) - delta w : (1-alpha)*exp(z)*(K/N)**(alpha) equilibrium : K = a Note the familiarity with the one-agent problem: symbols, calibration of parameters, and definition of exogenous shocks, are defined in exactly the same way. It is not necessary to redefine variables that were defined in the agent's program. All these variables are recognized and implicitly indexed. For instance a , which was defined in the preceding section and is implicitly with the agents distribution. Also, the equilibrium condition implicitly features an integration over all agents, so that K=a is intepreted as: K_t = \\int_{e,s} a(e,s) d\u03bc_t(e,s) K_t = \\int_{e,s} a(e,s) d\u03bc_t(e,s)","title":"Ex ante identical agents"},{"location":"model_def/#ex-ante-heterogeneous-agents","text":"DolARK allows to define models where one or many parameters of one agent's program is heterogenous, and distributed after some distribution. This is done by adding a special distribution section. Note To model heterogeneity in the discount factor, add a distribution section: distribution: \u03b2: !Uniform a: 0.95 b: 0.96 The effect of this section will be to instruct dolark to solve for several agents problem for different values \\beta^i \\beta^i associate with probabilities \\pi^i \\pi^i that approximate distribution \\beta \\beta . Denote by a^{i_\\beta} a^{i_\\beta} and d\\mu^{i_{\\beta}} d\\mu^{i_{\\beta}} the corresponding decision rules and ergodic distributions. The market clearing condition becomes: K_t = \\int_{\u03b2} d\u03c0(\u03b2) \\int_{e,s} a^{\u03b2}(e,s) d\u03bc^{\u03b2}_t(e,s) K_t = \\int_{\u03b2} d\u03c0(\u03b2) \\int_{e,s} a^{\u03b2}(e,s) d\u03bc^{\u03b2}_t(e,s) Attention There is a second experimental way to model heterogeneity: to treat the heterogenous parameter as a persistent shock. To implement it, the agent's problem needs to feature this shock as the first exogenous shock. Note that it can create subtle timing inconsistencies in the model. For instance symbol \\beta would be taken as representing \u03b2_t which might not be allowed for certain equations specifications. (transitions and arbitrage equations should be fine)","title":"Ex ante heterogeneous agents"},{"location":"perturbation/","text":"Perturbation w.r.t. aggregate state. Implementation restrictions: ex ante identical agents agents idiosyncratic shocks must be discretizable by markov chains aggregate shock is an AR1 (possibly multivariate) Notations (vague): m_t m_t is the aggregate exogenous shock, associated to transition function such that m_t = \\tau(m_{t-1}, \\epsilon_t) m_t = \\tau(m_{t-1}, \\epsilon_t) x_t x_t is a vector representing the values of the decision rule of all agents at date t. Denote by \\varphi^{x_t}() \\varphi^{x_t}() the decision rule it determines. Denote by T T the time iteration operator which pins down optimal decision today as a function of decisions tomorrow. y_t y_t is the vector of aggregate prices \\mu_t \\mu_t is a vector representing the distributions of agents across endogenous and exogenous idiosyncratic states given m_t m_t \\Pi(m_t, x_t, y_t) \\Pi(m_t, x_t, y_t) is the transition matrix, associated to policy x_t x_t across the individual's states Recall the definition of the equilibrium function: \\int \\mathcal{E}\\left(e^i, s, x_t(e^i,s), y_t\\right) d \\mu_t(e^i,s)= 0 \\int \\mathcal{E}\\left(e^i, s, x_t(e^i,s), y_t\\right) d \\mu_t(e^i,s)= 0 Knowing the approximate decision rule \\phi^{x_t} \\phi^{x_t} and distribution \\mu_t \\mu_t the above equation is naturally approximated by a function \\mathcal{A} \\mathcal{A} such that: \\mathcal{A}(m_t, \\mu_t, x_t, y_t) = \\int \\mathcal{E}\\left(e^i, s, \\varphi^{x_t}(e^i,s), y_t\\right) d \\mu_t(e^i,s) \\mathcal{A}(m_t, \\mu_t, x_t, y_t) = \\int \\mathcal{E}\\left(e^i, s, \\varphi^{x_t}(e^i,s), y_t\\right) d \\mu_t(e^i,s) The whole economy is characterized by the following equations: transition ( G G ): m_t = \\tau(m_{t-1}, \\eta_t) m_t = \\tau(m_{t-1}, \\eta_t) \\mu_t = \\mu_{t-1}.\\Pi(m_{t-1}, x_{t-1}, y_{t-1}) \\mu_t = \\mu_{t-1}.\\Pi(m_{t-1}, x_{t-1}, y_{t-1}) equilibrium ( F F ) x_t = T(m_t, y_t, m_{t+1}, x_{t+1}, y_{t+1}) x_t = T(m_t, y_t, m_{t+1}, x_{t+1}, y_{t+1}) \\mathcal{A}(m_t, \\mu_t, x_t, y_t)=0 \\mathcal{A}(m_t, \\mu_t, x_t, y_t)=0 Note that aggregate states (in the sense that they are predetermined) are m_t m_t and \\mu_t \\mu_t that is the aggregate shock and the distribution of agents' states. The controls are x_t x_t and y_t y_t that is agent's decisions and aggregate prices. For the sake of clarity, let us exemplify the notations above. Considering the Aiyagari (1994) model with aggregate productivity shocks presented in this note from the Model-Definition section - s_t = a_t s_t = a_t - x_t = i_{t} x_t = i_{t} - y_t = \\left( r_t, w_t \\right) y_t = \\left( r_t, w_t \\right) - e_t^i = \\left(y_t,\\epsilon_t^i\\right) e_t^i = \\left(y_t,\\epsilon_t^i\\right) - m_t = z_t m_t = z_t - \\mu_t \\mu_t is the joint distribution of agents over s_t s_t and \\epsilon_t^i \\epsilon_t^i given m_t m_t The transition equation associated with \\tau \\tau is simply \\log(z_t) = \\rho \\log(z_{t-1}) + \\sigma \\eta_t, \\quad \\eta_t \\sim \\mathcal{N}(0,1) \\log(z_t) = \\rho \\log(z_{t-1}) + \\sigma \\eta_t, \\quad \\eta_t \\sim \\mathcal{N}(0,1) The equilibrium equations defining \\mathcal{A} \\mathcal{A} are r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha}\\\\ K_t = \\int \\phi^{x_t} \\left( \\epsilon_t^i, a_t \\right) d\\mu_t\\left( a_t, \\epsilon_t^i\\right) \\mathcal T \\mathcal T is the time-iteration operator, which solves for x_t x_t in the Euler equation given m_t m_t , y_t y_t , m_{t+1} m_{t+1} and y_{t+1} y_{t+1}","title":"Perturbation"},{"location":"perturbation/#perturbation-wrt-aggregate-state","text":"Implementation restrictions: ex ante identical agents agents idiosyncratic shocks must be discretizable by markov chains aggregate shock is an AR1 (possibly multivariate) Notations (vague): m_t m_t is the aggregate exogenous shock, associated to transition function such that m_t = \\tau(m_{t-1}, \\epsilon_t) m_t = \\tau(m_{t-1}, \\epsilon_t) x_t x_t is a vector representing the values of the decision rule of all agents at date t. Denote by \\varphi^{x_t}() \\varphi^{x_t}() the decision rule it determines. Denote by T T the time iteration operator which pins down optimal decision today as a function of decisions tomorrow. y_t y_t is the vector of aggregate prices \\mu_t \\mu_t is a vector representing the distributions of agents across endogenous and exogenous idiosyncratic states given m_t m_t \\Pi(m_t, x_t, y_t) \\Pi(m_t, x_t, y_t) is the transition matrix, associated to policy x_t x_t across the individual's states Recall the definition of the equilibrium function: \\int \\mathcal{E}\\left(e^i, s, x_t(e^i,s), y_t\\right) d \\mu_t(e^i,s)= 0 \\int \\mathcal{E}\\left(e^i, s, x_t(e^i,s), y_t\\right) d \\mu_t(e^i,s)= 0 Knowing the approximate decision rule \\phi^{x_t} \\phi^{x_t} and distribution \\mu_t \\mu_t the above equation is naturally approximated by a function \\mathcal{A} \\mathcal{A} such that: \\mathcal{A}(m_t, \\mu_t, x_t, y_t) = \\int \\mathcal{E}\\left(e^i, s, \\varphi^{x_t}(e^i,s), y_t\\right) d \\mu_t(e^i,s) \\mathcal{A}(m_t, \\mu_t, x_t, y_t) = \\int \\mathcal{E}\\left(e^i, s, \\varphi^{x_t}(e^i,s), y_t\\right) d \\mu_t(e^i,s) The whole economy is characterized by the following equations: transition ( G G ): m_t = \\tau(m_{t-1}, \\eta_t) m_t = \\tau(m_{t-1}, \\eta_t) \\mu_t = \\mu_{t-1}.\\Pi(m_{t-1}, x_{t-1}, y_{t-1}) \\mu_t = \\mu_{t-1}.\\Pi(m_{t-1}, x_{t-1}, y_{t-1}) equilibrium ( F F ) x_t = T(m_t, y_t, m_{t+1}, x_{t+1}, y_{t+1}) x_t = T(m_t, y_t, m_{t+1}, x_{t+1}, y_{t+1}) \\mathcal{A}(m_t, \\mu_t, x_t, y_t)=0 \\mathcal{A}(m_t, \\mu_t, x_t, y_t)=0 Note that aggregate states (in the sense that they are predetermined) are m_t m_t and \\mu_t \\mu_t that is the aggregate shock and the distribution of agents' states. The controls are x_t x_t and y_t y_t that is agent's decisions and aggregate prices. For the sake of clarity, let us exemplify the notations above. Considering the Aiyagari (1994) model with aggregate productivity shocks presented in this note from the Model-Definition section - s_t = a_t s_t = a_t - x_t = i_{t} x_t = i_{t} - y_t = \\left( r_t, w_t \\right) y_t = \\left( r_t, w_t \\right) - e_t^i = \\left(y_t,\\epsilon_t^i\\right) e_t^i = \\left(y_t,\\epsilon_t^i\\right) - m_t = z_t m_t = z_t - \\mu_t \\mu_t is the joint distribution of agents over s_t s_t and \\epsilon_t^i \\epsilon_t^i given m_t m_t The transition equation associated with \\tau \\tau is simply \\log(z_t) = \\rho \\log(z_{t-1}) + \\sigma \\eta_t, \\quad \\eta_t \\sim \\mathcal{N}(0,1) \\log(z_t) = \\rho \\log(z_{t-1}) + \\sigma \\eta_t, \\quad \\eta_t \\sim \\mathcal{N}(0,1) The equilibrium equations defining \\mathcal{A} \\mathcal{A} are r_t = A \\alpha z_t \\left( \\frac{L}{K_t} \\right)^{1 - \\alpha} - \\delta\\\\ w_t = A (1-\\alpha) z_t \\left( \\frac{L}{K_t} \\right)^{\\alpha}\\\\ K_t = \\int \\phi^{x_t} \\left( \\epsilon_t^i, a_t \\right) d\\mu_t\\left( a_t, \\epsilon_t^i\\right) \\mathcal T \\mathcal T is the time-iteration operator, which solves for x_t x_t in the Euler equation given m_t m_t , y_t y_t , m_{t+1} m_{t+1} and y_{t+1} y_{t+1}","title":"Perturbation w.r.t. aggregate state."}]}